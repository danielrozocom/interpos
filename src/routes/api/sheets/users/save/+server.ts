import type { RequestHandler } from '@sveltejs/kit';
import { sbServer } from '$lib/supabase';

export const POST: RequestHandler = async ({ request }) => {
  try {
    const body = await request.json();
    const { id, name } = body;
    if (!name) {
      return new Response(JSON.stringify({ error: 'name requerido' }), { status: 400, headers: { 'Content-Type': 'application/json' } });
    }

    const creating = body.creating === true;

    if (id) {
      // Ensure ID is numeric
      if (isNaN(Number(id))) {
        return new Response(JSON.stringify({ error: 'ID debe ser num√©rico' }), { status: 400, headers: { 'Content-Type': 'application/json' } });
      }
      const numericId = Number(id);

  if (creating) {
        // Check existence
        const { data: existing, error: selectErr } = await sbServer.from('Customers').select('ID').eq('ID', numericId).maybeSingle();
        if (selectErr) {
          console.error('Error checking existing customer:', selectErr);
          return new Response(JSON.stringify({ error: 'Error verificando usuario existente' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
        }
        if (existing) {
          return new Response(JSON.stringify({ error: 'El ID ya existe' }), { status: 409, headers: { 'Content-Type': 'application/json' } });
        }
        // create new with provided ID
        const { data: insertData, error: insertErr } = await sbServer.from('Customers').insert([{ ID: numericId, Name: name, Balance: '0' }]).select().limit(1).maybeSingle();
        if (insertErr) {
          console.error('Error inserting customer:', insertErr);
          return new Response(JSON.stringify({ error: 'Error creando usuario' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
        }
        return new Response(JSON.stringify({ success: true, user: insertData || null }), { status: 200, headers: { 'Content-Type': 'application/json' } });
      } else {
        // Update existing customer; if originalId provided and different, handle ID change
        const originalId = body.originalId;
        if (originalId && String(originalId) !== String(id)) {
          // Check new ID doesn't exist
          const { data: existingNew, error: selErr } = await sbServer.from('Customers').select('ID').eq('ID', numericId).maybeSingle();
          if (selErr) {
            console.error('Error checking new ID existence:', selErr);
            return new Response(JSON.stringify({ error: 'Error verificando nuevo ID' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
          }
          if (existingNew) {
            return new Response(JSON.stringify({ error: 'El nuevo ID ya existe' }), { status: 409, headers: { 'Content-Type': 'application/json' } });
          }
          // Proceed to update row matching originalId: set new ID and name
          const origNumeric = Number(originalId);
          const { error: updateErr } = await sbServer.from('Customers').update({ ID: numericId, Name: name }).eq('ID', origNumeric);
          if (updateErr) {
            console.error('Error updating customer with ID change:', updateErr);
            return new Response(JSON.stringify({ error: 'Error actualizando usuario' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
          }
          return new Response(JSON.stringify({ success: true, id }), { status: 200, headers: { 'Content-Type': 'application/json' } });
        }
        // No ID change: simple update
        const { error: updateErr } = await sbServer.from('Customers').update({ Name: name }).eq('ID', numericId);
        if (updateErr) {
          console.error('Error updating customer:', updateErr);
          return new Response(JSON.stringify({ error: 'Error actualizando usuario' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
        }
        return new Response(JSON.stringify({ success: true, id }), { status: 200, headers: { 'Content-Type': 'application/json' } });
      }
    }

    // create new customer; if ID is auto-generated by DB, omit ID
    const { data, error: insertErr } = await sbServer.from('Customers').insert([{ Name: name, Balance: '0' }]).select().limit(1).maybeSingle();
    if (insertErr) {
      console.error('Error inserting customer:', insertErr);
      return new Response(JSON.stringify({ error: 'Error creando usuario' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
    }

    // return created record (if DB returns it)
    return new Response(JSON.stringify({ success: true, user: data || null }), { status: 200, headers: { 'Content-Type': 'application/json' } });
  } catch (error) {
    console.error('Error in users/save:', error);
    return new Response(JSON.stringify({ error: 'Error interno' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
  }
};
